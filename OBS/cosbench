同样的工具，华为开源obscmdbench
https://github.com/huaweicloud-obs/obscmdbench

curl命令
curl -k --user "<name:pass>" -v -H content-type -X POST -d "{}" http://XXX

2种方式区别：
virtual-host：http://<bucket>.<server>/object
path-style：http://<server>/<bucket>/object


依赖JRE
yum install java curl -y

yum install zip unzip wget -y


手工安装java（yum install java的话就不需要了）
mkdir /usr/java; cp /home/jdk-6u45-linux-x64.bin /usr/java; chmod u+x /usr/java/jdk-6u45-linux-x64.bin; cd /usr/java/; ./jdk-6u45-linux-x64.bin;
# vi /etc/profile  在最后加下下面几行export
cat << EOF >> /etc/profile
export JAVA_HOME=/usr/java/jdk1.6.0_45
export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar
export PATH=$PATH:$JAVA_HOME/bin
EOF
# reboot
如果出现错误，请检查/etc/profile文件。

压缩包里有说明文档：COSBenchUserGuide.pdf
最新版本在https://github.com/intel-cloud/cosbench/releases下
wget http://github.com/intel-cloud/cosbench/releases/download/v0.4.2.c4/0.4.2.c4.zip
unzip 0.4.2.c4.zip
cd 0.4.2.c4
chmod +x *.sh
unset http_proxy
sh start-all.sh

测试服务正常
curl http://127.0.0.1:19088/controller/index.html

打开 http://ip:19088/controller/
（安全组规则，添加TCP 19088端口即可。AWS的http默认端口是80，且不可修改。）
准备好test_case.xml,点击“submit new workloads”

AWS的AK、SK，在我的安全凭证里（您的安全凭证）
https://help.bittitan.com/hc/en-us/articles/115008255268-How-do-I-find-my-AWS-Access-Key-and-Secret-Access-Key-

报错：
Note: cannot parse the xml configuration from , due to The markup in the document following the root element must be well-formed.!
注意xml格式正确.
配置xml文件说明：
workers表示并发数，totalOps表示总的操作数，driver为不同的压力机器
c(number)        常量
u(min, max)      范围随机选取
r(min,max)       范围顺序选取
containers       桶数
objects          对象个数
sizes            对象大小
LongConnection   长短链接。取值true/false
interval         表示每次图形采样点周期，默认5秒。可提高精度修改为1秒
http/https       endpoint=直接写https或http即可

<work name="main" workers="8" totalOps="1600">
  <operation type="read" ratio="100" config="containers=r(1,32);objects=r(51,100);sizes=c(64)KB" />
</work>

config="cprefix=chen-az;containers=r(1,1)
cprefix表示桶名前缀，如上桶名为chen-az1
oprefix表示对象名前缀，默认为myobjects_
上传的对象命名为myobjects<XXX>

压测记录，在/0.4.2.c4/archive目录下。进程重启后，界面上不显示压测记录

AWS使用失败，卡在无法创建桶这一步，手工创建后就好了。

AWS配置走内网
1.VPC->配置终端节点
2.选择s3服务，选择vpc（VPC这里选择的是跟你EC2主机关联的vpc策略）
3.


判断网络走内网
rpm -Uvh https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
yum install iftop -y
yum install bind-utils -y (nslookup)

参考（终端节点）
http://blog.51cto.com/thedream/1893168
https://docs.aws.amazon.com/zh_cn/vpc/latest/userguide/vpc-endpoints-s3.html

【get对象报错】
Unable to verify integrity of data download. Client calculated content hash didn't match hash calculated by Amazon S3. The data may be corrupt.

解决方案：
stop-all.sh 停止 cosbench 进程(controller, drivers)
编辑 cosbench-start.sh 文件,找到java启动命令行参数, 增加"-Dcom.amazonaws.services.s3.disableGetObjectMD5Validation=true" 关闭S3的MD5校验功能
start-all.sh 启动所有的cosbench processes.

【添加多台driver】
配置Control.conf
/home/0.4.2.c4/conf/controller.conf下增加driver
注意，drivers的数量一定要与[driver1]相同，否则服务可以启动，但是页面报错
压测时，按提交的workloads里workers数/N，分发到N个work节点执行。

例如workers="100"，则Driver的任务分布如下：
1 - 10	
11 - 20
21 - 30
31 - 40
41 - 50
51 - 60
61 - 70
71 - 80
81 - 90
91 - 100

drivers =driver的总个数N
[driver1]
name = driver1
url = http://*.11:18088/driver

[driver2]
name = driver2
url = http://*.12:18088/driver

[driverN]
name = driverN
url = http://192.168.10.116:18088/driver

Driver.conf的配置
如果要在不同机器启动dirver，需要分别运行start-driver.sh，并确保通信是否正常。
可以通过 curl http://<dirver-host>:18088/driver/index.html确定通信是否正常

【查看结果】
1、Avg-ResTime  响应平均时间
2、Avg-ProcTime 平均处理时间
3、Throughput：吞吐量，也就是我们常说的TPS
4、bandwith：带宽
5、succ-ratio :成功数


参考
https://blog.csdn.net/u010390063/article/details/78337997
https://www.cnblogs.com/landhu/p/5843282.html
