如果想用24小时制式，则sar、iostat和mpstat 前面增加LC_TIME=en_uk.utf8
比如LC_TIME=en_uk.utf8 iostat -xcmt 1

#yum install sysstat perf -y
#vi res.sh
cat /proc/cmdline > ./$path/cmdline.info
cat /proc/cpuinfo |grep flags |uniq > ./$path/cpu-flag.info
time=$1
dir=$2
pid=$3
date1=`date +"%Y-%m-%d"`
#windows not support :
date2=`date +"%H-%M-%S"`
path=/$dir/$date1/$date2
mkdir -p ./$path
# top -d 0.1 0.1秒间隔
sar -n DEV 1 1|grep IFACE > ./$path/sar.txt
sar -n DEV 1 $time|grep eth0 >> ./$path/sar.txt&
top -bd 1 -n $time > ./$path/top.txt&
mpstat -P ALL 1 $time > ./$path/mpstat.txt&
iostat -xcmt 1 $time > ./$path/iostat.txt&
vmstat -n -t -S M 1 $time > ./$path/vmstat.txt&
top -H -p $pid -bd 1 -n 60 > ./$path/server-threads.txt&
#空字节('')分隔
cat /proc/$pid/environ| tr '\000' '\n' > ./$path/server-environ.txt&

#简化top输出的大小
sleep $time && grep ^top -A 20 ./$path/top.txt > ./$path/top-less.txt &

cpus=`cat /proc/cpuinfo |grep "processor"|wc -l`
cishu=echo "scale=0;$time/3;" | bc
#for i in `seq 3600`
for i in `seq $cishu`
do
  sleep 3
  load=`uptime |awk '{ print $10 }'|awk -F, '{ print $1 }'`
  cpu=`echo "$cpus*0.75" | bc`
  if [ `echo "$load < $cpu"|bc` -eq 1 ] ; then
    echo  "$load < $cpu "
  else
    echo  "$load > $cpu "
    perf top > ./$path/perf-top.log &
    sleep 10
    pkill -9 perf
    perf stat -a -- sleep 3 > ./$path/perf-stat.log &
    perf record -F 99 -a -g -- sleep 60
    perf script > ./$path/out.perf
    #ps -ef |grep perf |awk '{print $2}' |xargs kill -9
    break
  fi
done

#元数据https://support.huaweicloud.com/usermanual-ecs/zh-cn_topic_0042400609.html
#https://www.alibabacloud.com/help/zh/doc-detail/49122.htm
#连接超时时间用--connect-timeout参数，数据传输的最大允许时间用-m参数,-s不显示进度
#华为/openstack/latest/meta_data.json
#华为meta-data/public-ipv4,阿里meta-data/eipv4
#route -n获取IP地址，如169.254.169.254或100.100.100.200，http://非必带
curl --connect-timeout 3 -m 5 -s http://169.254.169.254/latest/meta-data/instance-type > hw-flavor.txt&
curl --connect-timeout 3 -m 5 -s http://100.100.100.200/latest/meta-data/instance/instance-type > ali-flavor.txt&



处理out.perf
./stackcollapse-perf.pl /home/out.perf > out.perf-folded
./flamegraph.pl out.perf-folded > perf-kernel.svg

insn per cycle(IPC)
if IPC<1.0
  NUMA，提升CPU缓存，减少内存IO
if IPC>1.0
  CPU火焰图，优化代码指令，更快的时钟频率(GHz)
CPU比主内存快，当CPU 100%，瓶颈不一定是CPU，也可能是DRAM（等待内存）。
===================================================================================================================================
不知道哪个CPU会高，用下面采集TOP4（如果要采集更多，修改-A 10为更大），存为一个单独文件。
1.txt只是中间过程文件，2.txt才是最终结果
每轮采集10组数据，采集seq里指定的5次，做成入参
for i in `seq 1 5`
do
  top -bd 1 -n 10 > 1.txt
  grep ^top -A 10 1.txt >> 2.txt
  sleep 1
done

seq接受入参
[root@opt]# sh chen.sh 3
haha
haha
haha
[root@opt]# cat chen.sh
for i in `seq 1 $1`
do
  echo haha
done



已知某个进程CPU高，用下面,n3表示采集3次，间隔1秒.(如果不指定-d,默认间隔3秒)
pid=$(pidof named)
top -bp $pid -d 1 -n1


# sleep 5;sh res.sh 600

CPU top20
ps -eo pcpu,pid,user,args | sort -k 1 -r | head -20

top -p 进程号      单独查看该进程的CPU/内存等使用情况
ps -eLf |grep XXX 查看程序运行所产生的线程情况

[root@hec-mysql ~]# iostat -dx 1
Linux 3.10.0-327.el7.x86_64 (hec-mysql) 	12/21/2017 	_x86_64_	(4 CPU)

Device:         rrqm/s   wrqm/s     r/s     w/s    rkB/s    wkB/s avgrq-sz avgqu-sz   await r_await w_await  svctm  %util
vda               0.00     0.09    0.12    0.07     2.69     0.78    35.58     0.00    2.96    3.68    1.73   0.60   0.01
vdb               0.00     0.00    0.01    0.00     0.18     0.00    44.44     0.00    0.73    0.75    0.54   0.31   0.00
r/s=read IOPS
w/s=write IOPS
rkB/s=读带宽
wkB/s=写带宽
rrqm/s/，wrqm/表示被合并的测试
avgrq-sz=FIO块大小=扇区35.58*512(Byte)/1024=18KB，即35.58除以2，即FIO压测的bs参数
avgqu-sz=FIO队列深度，即FIO压测的iodepth参数

网络
Average:        IFACE   rxpck/s   txpck/s    rxkB/s    txkB/s   rxcmp/s   txcmp/s  rxmcst/s
Average:         eth0  12255.30  11317.05 113529.90  24609.34      0.00      0.00      0.00

rxpck/s 收PPS
txpck/s 发PPS
rxkB/s  收带宽
txkB/s  发带宽

直接用这一条命令搞定
yum install dstat -y
dstat -N eth0
----total-cpu-usage---- -dsk/total- --net/eth0- ---paging-- ---system--
usr sys idl wai hiq siq| read  writ| recv  send|  in   out | int   csw 
  0   0 100   0   0   0|   0     0 |  54B  346B|   0     0 | 106   112 
  
输出结果到文件
dstat -N eth0 --output ./200.csv

dstat -cdny --socket --fs -N eth0 -T
dstat -cdny --socket --fs -N eth0 -D /dev/vdb -t

dstat -cdnym --socket --fs -N eth0 -D /dev/vdb -t
----total-cpu-usage---- --dsk/vdb-- --net/eth0- ---system-- ------memory-usage----- ------sockets------ --filesystem- ----system----
usr sys idl wai hiq siq| read  writ| recv  send| int   csw | used  buff  cach  free|tot tcp udp raw frg|files  inodes|     time     
  5   1  93   0   0   0| 693B  143k|   0     0 |1615   433 | 226M 19.8M 1656M 13.7G|113   6   3   0   0|  928  21449 |22-01 15:52:28
  0   0 100   0   0   0|   0     0 | 112B 1492B| 140   232 | 226M 19.8M 1656M 13.7G|113   6   3   0   0|  928  21449 |22-01 15:52:29




dmidecode --type memory
Valid type keywords are:
  bios
  system
  baseboard
  chassis
  processor
  memory
  cache
  connector
  slot

最全面，用这个good
dstat -cmsdnl -D vda -N eth0 --top-io --top-cpu --top-mem --disk-util --output ./200vod_server.csv

==================================================================================================
淘宝的监控工具monitor,tsar
https://github.com/alibaba/tsar

wget -O tsar.zip https://github.com/alibaba/tsar/archive/master.zip --no-check-certificate
unzip tsar.zip
cd tsar-master
make
make install

tsar -l -i 1
配置文件，/etc/tsar/tsar.conf，控制模块开关。
output_file_path 采集到的数据默认保存到的文件（/var/log/tsar.data）
参考https://www.cnblogs.com/zengkefu/p/5638763.html
