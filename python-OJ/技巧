REST API，不同的URL写不同的API，利用动态的__getattr__引入链式调用，一个通用方法搞定。
class Chain(object):
 
    def __init__(self, path=''):
        self._path = path
 
    def __getattr__(self, path):
        return Chain('%s/%s' % (self._path, path))
 
    def __str__(self):
        return self._path
 
    __repr__ = __str__
>>> Chain().status.user.timeline.list
'/status/user/timeline/list'
这样，无论API怎么变，SDK都可以根据URL实现完全动态的调用，而且，不随API的增加而改变！


logging
import logging
logging.basicConfig(level=logging.INFO)

这就是logging的好处，它允许你指定记录信息的级别，有debug，info，warning，error等几个级别，当我们指定level=INFO时，logging.debug就不起作用了。
同理，指定level=WARNING后，debug和info就不起作用了。这样一来，你可以放心地输出不同级别的信息，也不用删除，最后统一控制输出哪个级别的信息。
s = '0'
n = int(s)
logging.info('n = %d' % n)
print(10 / n)

