REST API，不同的URL写不同的API，利用动态的__getattr__引入链式调用，一个通用方法搞定。
class Chain(object):
 
    def __init__(self, path=''):
        self._path = path
 
    def __getattr__(self, path):
        return Chain('%s/%s' % (self._path, path))
 
    def __str__(self):
        return self._path
 
    __repr__ = __str__
>>> Chain().status.user.timeline.list
'/status/user/timeline/list'
这样，无论API怎么变，SDK都可以根据URL实现完全动态的调用，而且，不随API的增加而改变！

=====================================================================================
logging
import logging
logging.basicConfig(level=logging.INFO)

这就是logging的好处，它允许你指定记录信息的级别，有debug，info，warning，error等几个级别，当我们指定level=INFO时，logging.debug就不起作用了。
同理，指定level=WARNING后，debug和info就不起作用了。这样一来，你可以放心地输出不同级别的信息，也不用删除，最后统一控制输出哪个级别的信息。
s = '0'
n = int(s)
logging.info('n = %d' % n)
print(10 / n)
======================================================================================
return n if n >= 0 else (-n)

注意：字符串replace函数，返回值是替换后的新str，入参old-str不会变化

字符串函数
s.join(seq)    返回用s把序列seq串联的字符串。
"-".join(["1","2","3"]) 结果为1_2_3
将列表所有元素连接成一个字符串，元素之间增加一个'-'


zip为一种创建字典的好方法
m={'a','b','c'}
n={1,2,3}
b=dict(zip(m,n))
print(b)

当文件以文本文件方式打开时,读写按照字符串方式
当文件以二进制文件方式打开时,读写按照字节流方式

seek()的三种模式
1）f.seek(p,0) 移动当文件第p个字节处，绝对位置
2）f.seek(p,1) 移动到相对于当前位置之后的p个字节
3）f.seek(p,2) 移动到相对对文章尾之后的p个字节

列表可以是1/2/多维，字典是高维的

reduce把结果继续和序列的下一个元素做累积计算
求和运算可以直接用Python内建函数sum()，没必要动用reduce
但是如果要把序列[1, 3, 5, 7, 9]变换成整数13579，reduce就可以派上用场：
from functools import reduce
print(reduce(lambda x,y:x*10+y, [1, 3, 5, 7, 9]))
输出13579
可用于f(x)=ma1+na2

print(list(filter(lambda x:x%2==1, [1, 2, 4, 5, 6, 9, 10, 15])))
输出
[1, 5, 9, 15]
filter()函数返回的是一个Iterator，是一个惰性序列，需要用list()函数获得所有结果并返回list。
Python的惰性序列多数指 iterator，具有惰性计算特点的序列称为惰性序列


# yield: 好处：1.不会将所有数据取出来存入内存中；而是返回了一个对象；
可以通过对象获取数据；用多少取多少，可以节省内容空间。
def odd_iter():
    n = 1
    while n<30:
        n = n + 2
        yield n
print(list(filter(lambda x:x>10,odd_iter())))
输出
[11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31]


def foo():
    print("starting...")
    while True:
        res = yield 4
        print("res:",res)
g = foo()
print(next(g))
print("*"*20)
print(next(g))
输出
starting...
4
********************
res: None
4
分析解释
1.程序开始执行以后，因为foo函数中有yield关键字，所以foo函数并不会真的执行，而是先得到一个生成器g(相当于一个对象)
2.直到调用next方法，foo函数正式开始执行，先执行foo函数中的print方法，然后进入while循环
3.程序遇到yield关键字，然后把yield想想成return,return了一个4之后，程序停止，并没有执行赋值给res操作，此时next(g)语句执行完成，所以输出的前两行（第一个是while上面的print的结果,第二个是return出的结果）是执行print(next(g))的结果，
4.程序执行print("*"*20)，输出20个*
5.又开始执行下面的print(next(g)),这个时候和上面那个差不多，不过不同的是，这个时候是从刚才那个next程序停止的地方开始执行的，也就是要执行res的赋值操作，这时候要注意，这个时候赋值操作的右边是没有值的（因为刚才那个是return出去了，并没有给赋值操作的左边传参数），所以这个时候res赋值是None,所以接着下面的输出就是res:None,
6.程序会继续在while里执行，又一次碰到yield,这个时候同样return 出4，然后程序停止，print函数输出的4就是这次return出的4.

======================================================================================
python中eval()与int()的区别

eval(str [,globals [,locals ]])函数将字符串str当成有效Python表达式来求值，并返回计算结果。
1,针对数字，eval()与int() 里面数字的字符串，能否返回相同的结果(9999)。
print eval('9999')   //返回9999
print int('9999')    //返回9999

2,针对字符串的表达式，eval能接受字符串，并把"9999+1"作为表达式求值，而int()调用失败，由于字符串参数不能代表整数的字符串，有非法的文字"+"
print eval('9999+1')   //返回10000
print int('9999+1')    //返回ValueError: invalid literal for int() with base 10: '9999+1'


https://blog.csdn.net/ReCclay/article/details/88375363

