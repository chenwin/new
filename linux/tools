可参考https://github.com/bingjin/CloudTesting


base_install
yum install tar wget gcc make -y
apt-get install make gcc g++

========================================================================================================
CPU
wget http://cdn.primatelabs.com/Geekbench-3.4.2-Linux.tar.gz -O /home/Geekbench-3.4.2-Linux.tar.gz
tar -zxvf /home/Geekbench-3.4.2-Linux.tar.gz -C /home
ln -s /home/dist/Geekbench-3.4.2-Linux/geekbench_x86_64 /usr/local/bin/geekbench_x86_64
geekbench_x86_64 -r lhcici521@163.com qpp6g-kq4el-bo72w-mdngp-2kcvx-eu2uq-gjrkp-l5q7r-qi36y
geekbench_x86_64 -n | tee file_path

结果参考
Benchmark Summary
  Integer Score              3609  14274
  Floating Point Score       3412  13494
  Memory Score               2493   4892

  Geekbench Score            3307  12085

-n
--no-upload            do not upload results to the Geekbench Browser

Upload results to the Geekbench Browser? [Y/n]n

========================================================================================================
stream
wget http://www.cs.virginia.edu/stream/FTP/Code/stream.c
gcc -O3 -fopenmp -DSTREAM_ARRAY_SIZE=64000000 -DNTIMES=10 stream.c -o stream

gcc -O3 -fopenmp -DSTREAM_ARRAY_SIZE=<num> -DNTIMES=<num> stream.c -o stream
6400000 10
ln -s /home/stream /usr/local/bin/stream
stream | tee file_path

1、内存数组大小的设置，必须要远大于L3 Cache的大小，否则就是测试缓存的吞吐性能；
2、CPU数目很有关系，一般来说，一两个核的计算能力，是远远到不了内存带宽的，整机的CPU全部运行起来，才可以有效地测试内存带宽。当然跑单核的stream测试也有意义，可以测试内存的延时。/3、
3、开启NUMA，可以有效地提供内存的吞吐性能，降低内存时延
4、通过icc编译，可以有效地提供内存带宽性能分。原因是Intel优化了CPU的指令，通过指令向量化和指令Prefetch操作，加速了数据的读写操作以及指令操作。

https://www.jianshu.com/p/3465d6af4425


Turbostat
Intel提供的超频检测工具，在Linux下获取睿频频率的工具。

使用方法： 
./turbostat -i 1
1秒刷新一次显示，TSC_MHz为CPU默认的最高频率，睿频怎么看？结合stress压测后可以在Bzy_MHz看到
========================================================================================================
内存时延
mlc
https://software.intel.com/en-us/articles/intelr-memory-latency-checker

./mlc --latency_matrix -r -e

https://software.intel.com/system/files/managed/40/f3/mlc_v3.6.tgz

实时性能测试
Cyclictest
版本选择下载地址
https://git.kernel.org/pub/scm/utils/rt-tests/rt-tests.git

yum install numactl-devel gcc git -y
git clone git://git.kernel.org/pub/scm/utils/rt-tests/rt-tests.git
wget https://git.kernel.org/pub/scm/utils/rt-tests/rt-tests.git/snapshot/rt-tests-1.3.tar.gz
cd rt-tests-1.3
git checkout stable/v1.0
make all
make install
make cyclictest
cyclictest -D 20s -q

cyclictest -I 1000 -p 99 -l 10000 -t 1 -h 30 -m -a 1
========================================================================================================
wget http://soft.laozuo.org/scripts/UnixBench5.1.3.tgz
tar xf UnixBench5.1.3.tgz
cd UnixBench
make
./Run

http://www.sohu.com/a/248896408_100113911
在Pipe-based Context Switching用例得分高的腾讯云上，两个线程大部分时间运行在同一CPU上，而AWS和阿里云的两个线程落在了不同的CPU上。

继续搜索，发现有大神也指出了这个问题，并在Github上分享了Pipe-based Context Switching的补丁。
补丁地址：https://github.com/qcsuper/byte-unixbench
补丁思路：把两个线程强制绑定到不同CPU上运行，确保了测试不受Guest OS中的调度算法及CPU负载均衡算法的影响。

2个补丁
https://yq.aliyun.com/articles/674732
========================================================================================================
netserver(bindwith)

wget https://codeload.github.com/HewlettPackard/netperf/tar.gz/netperf-2.7.0 -O /home/netperf-netperf-2.7.0.tar.gz
tar -zxvf /home/netperf-netperf-2.7.0.tar.gz -C /home
cd /home/netperf-netperf-2.7.0
./configure
make
make install
ln -s /usr/local/bin/netserver /usr/bin
ln -s /usr/local/bin/netperf /usr/bin

server:
netserver -p 11256

client:
netperf -H 172.16.2.147 -p 11256 -t TCP_STREAM -l 120s -- -m 1440 > file_path

#-c [cpu_rate]     Report local CPU usage
#-C [cpu_rate]     Report remote CPU usage
#-f G|M|K|g|m|k    Set the output units
SERVER_IP=10.66.85.230

for proto in TCP_STREAM UDP_STREAM
do
    for sz in 32 64 128 256 512 1024 2048 4096 8192 16384 32768
    do
        netperf -H $SERVER_IP -c -C -t $proto -f m -l 180s -- -m $sz > file_path/$sz.txt
    done
done

========================================================================================================
qperf(latency)
yum install qperf
or:
wget https://www.openfabrics.org/downloads/qperf/qperf-0.4.9.tar.gz
tar -zxvf qperf-0.4.9.tar.gz
cd qperf-0.4.9
yum install perl
./configure
make
make install

ubuntu install perl:
wget http://www.cpan.org/src/5.0/perl-5.26.1.tar.gz 
tar -xzf perl-5.26.1.tar.gz 
cd perl-5.26.1 
./Configure -des -Dprefix=$HOME/localperl 
make 
make test 
make install 

server:
qperf &

client:
qperf 192.168.0.171 -t 120 -m 64 -vvs tcp_lat conf

-------------------------------------------------------------------------------------------------
加conf能显示双方主机名、CPU和OS内核信息、qperf版本
conf:
    loc_node   =  vod-0002.novalocal
    loc_cpu    =  8 Cores: Intel Xeon Gold 6151 @ 3.00GHz
    loc_os     =  Linux 3.10.0-693.11.1.el7.x86_64
    loc_qperf  =  0.4.9
    rem_node   =  vod-0001.novalocal
    rem_cpu    =  8 Cores: Intel Xeon Gold 6151 @ 3.00GHz
    rem_os     =  Linux 3.10.0-693.11.1.el7.x86_64
    rem_qperf  =  0.4.9
--------------------------------------------------------------------------------------------------
SERVER_IP=10.66.85.230

for proto in TCP_STREAM UDP_STREAM
do
    for sz in 32 64 128 256 512 1024 2048 4096 8192 16384 32768
    do
        qperf $SERVER_IP -t 180 -m $sz -vvs tcp_lat conf > file_path/$sz.txt
    done
done

========================================================================================================
iperf(PPS)
wget https://github.com/esnet/iperf/archive/3.3.tar.gz -O /home/iperf3.3.tar.gz
tar -zxvf /home/iperf3.3.tar.gz -C /home
cd iperf-3.3
./configure
make
make install

or
yum install iperf3

server:
iperf3 -s -p 50001


for i in `seq 50001 50016`
do
  iperf3 -c 192.168.0.95 -b 0 -u -t 86400 -l 64 -p $i > /dev/null 2>&1 &
done

iperf3 -P 4 表示同一个机器启用4个客户端
========================================================================================================
fio(disk)
wget https://github.com/axboe/fio/archive/fio-2.14.tar.gz -O /home/fio-2.14.tar.gz
tar -zxvf /home/fio-2.14.tar.gz -C /home
cd /home/fio-fio-2.14
yum install libaio-devel -y
./configure
make
make install


用法
fio -filename=/dev/sdb1 -direct=1 -rw=randread -bs=16k -size=200G -iodepth=1 -ioengine=libaio -numjobs=1 -group_reporting -name=TEST_NAME --output=$file 

-ramp_time=120 -time_based -runtime=600

先测读再测写

iops:8k-128队列randwrite/randread
bw:  1024k-32队列write/read
lat: 8krandwrite/randread

local disk:

限速fio压测
fio -ioengine=libaio -group_reporting -direct=1 -rw=$1 -bs=$2k -iodepth=32 -rate=$3m -runtime=$4 -time_based -name=/dev/vdb --output=./bw.log

========================================================================================================
#cpu url https://www.geekbench.com/geekbench3/download/linux/#download
#fio url https://github.com/axboe/fio/releases
#iperf url https://github.com/esnet/iperf.git
